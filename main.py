# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã, –¥–æ–ª–∂–µ–Ω –∫—Ä—É—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –±–µ—Ä–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≥—É–≥–ª —Ñ–æ—Ä–º–∞–º, –≥–¥–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏,
# –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–Ω—Ñ–æ–π –æ –∫–Ω–∏–µ–Ω—Ç–∞—Ö, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Å–æ–≤–æ–º
# –ø–æ—è—Å–µ, –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤ –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É.
#
# –í —Ñ–∞–π–ª–µ data/sheepairs –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è - –æ—Ç–∫—É–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∫—É–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
# –í —Ñ–∞–π–ª–µ data/sheetstocompare - —Ç–∞–±–ª–∏—Ü—ã, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω—Ñ—É –æ –∫–ª–∏–µ–Ω—Ç–µ
# —Å–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é gspread
# –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ —ç—Ç–∏ (BASE COLUMN INDEXES –≤ –∫–æ–¥–µ):
# 1 —Å—Ç–æ–ª–±–µ—Ü - –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, 2 - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞, 3 - —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞, 4 - –∏–Ω—Ñ–æ –æ –Ω–æ–º–µ—Ä–µ, 5 - –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ
# –¥–ª—è –∏–Ω—Ñ–æ –æ –Ω–æ–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å Dadata
# Servive –∞–∫–∫–∞—É–Ω—Ç –∑–∞–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π, —è –æ—Ç–∫–ª—é—á—É –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —Å–µ–π—á–∞—Å, —Ç–∫ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–æ–µ–º—É –ª–∏—á–Ω–æ–º—É –≥—É–≥–ª—É



import time
import json
import csv
import re
import datetime
import httpx

import gspread
from dadata import Dadata

from features import send_stat, gspread_function, send_personal, normalize_phone

pause_between_checks_secs = 60
sheet_pairs_file = 'data/sheetpairs.csv'
sheets_to_compare_file = 'data/sheetstocompare.csv'
google_service_account_file = 'data/service_account.json'
dadata_tokens_file = 'data/dadata_tokens.json'
MANAGERS_NAME_COLUMN_NAME = '–ö—Ç–æ –∑–≤–æ–Ω–∏–ª'

# BASE COLUMN INDEXES:   # –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–∞–∫–∏–º–∏
TIMESTAMP_COL = 0
CLIENT_NAME_COL = 1
PHONE_COL = 2
PHONE_INFO_COL = 3
MANAGERS_NAME_AND_INFO_COL = 4
MANAGERS_NAME_AND_INFO_COL_LETTER = 'E'


def get_updates(sheet_pair):
    sa = gspread.service_account(google_service_account_file)
    sh = gspread_function(sa.open_by_url, sheet_pair['Source Spreadsheet URL'])
    wks = gspread_function(sh.get_worksheet_by_id, int(sheet_pair['Source Worksheet ID']))
    last_timestamp = get_last_timestamp(sheet_pair)
    data = gspread_function(wks.get_values)

    last_copied_row = None
    for n, line in enumerate(data):
        if last_timestamp == line[0]:
            last_copied_row = n
    if last_copied_row is None:
        send_personal('CRM/main.py: WARNING not found last copied row')
        print('WARNING not found last copied row')
        send_personal('WARNING: CRM not found last copied row')
        return []

    last_filled_row = len(data)

    new_clients = []
    for row in data[last_copied_row+1:last_filled_row]:
        new_clients.append({'sheet_row': row})
    return new_clients


def get_last_timestamp(sheet_pair):
    sa = gspread.service_account(google_service_account_file)
    sh = gspread_function(sa.open_by_url, sheet_pair['Destination Spreadsheet URL'])
    wks = gspread_function(sh.get_worksheet_by_id, int(sheet_pair['Destination Worksheet ID']))
    column0_values = gspread_function(wks.col_values, 1)
    column0_values.reverse()
    return column0_values[0]


def remove_with_no_phones(rows):
    new_list = []
    for row in rows:
        if not row['sheet_row']:
            continue
        try:
            phone = row['sheet_row'][PHONE_COL]
        except IndexError:
            continue
        if not phone:
            continue
        if len(phone) < 6:
            continue
        digits_count = 0
        for symbol in phone:
            if symbol.isdigit():
                digits_count += 1
        if digits_count < 7:
            continue
        new_list.append(row)
    return new_list


def get_client_info(clients):
    worksheet_data_list = []
    sa = gspread.service_account(google_service_account_file)
    with open(sheets_to_compare_file) as f:
        dictreader = csv.DictReader(f)
        for row in dictreader:
            sh = gspread_function(sa.open_by_url, row['Spreadsheet URL'])
            for wks in gspread_function(sh.worksheets):
                worksheet_data_list.append(gspread_function(wks.get_values))

    for client in clients:
        phone = client['sheet_row'][PHONE_COL]
        if not phone:
            continue
        managers_name = ''
        client_info = ''

        for worksheet_data in worksheet_data_list:
            try:
                headers = worksheet_data[0]
            except IndexError:
                continue

            managers_name_col = None
            for n, header in enumerate(headers):
                if MANAGERS_NAME_COLUMN_NAME in header:
                    managers_name_col = n
                    break

            for row in worksheet_data[1:]:
                if row == client['sheet_row']:
                    continue
                for cell in row:
                    if not normalize_phone(phone) in normalize_phone(cell):
                        continue
                    if managers_name_col:
                        if row[managers_name_col]:
                            if managers_name:
                                managers_name += '\n'
                            managers_name += row[managers_name_col].strip()
                    for i, cell_2nd_cycle in enumerate(row):
                        if i == managers_name_col:
                            continue
                        if not cell_2nd_cycle:
                            continue
                        if client_info:
                            client_info += '\n'
                        if headers[i]:
                            client_info += headers[i] + ': '
                        client_info += cell_2nd_cycle
        if managers_name:
            managers_name = '\n'.join(set(managers_name.splitlines()))   # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
            client['sheet_row'][MANAGERS_NAME_AND_INFO_COL] = managers_name
        if client_info:
            if not managers_name:
                client['sheet_row'][MANAGERS_NAME_AND_INFO_COL] = 'üëÄ'
            client['info'] = client_info
    return clients



def google_write(clients, sheet_pair):
    sa = gspread.service_account(google_service_account_file)
    sh = gspread_function(sa.open_by_url, sheet_pair['Destination Spreadsheet URL'])
    wks = gspread_function(sh.get_worksheet_by_id, int(sheet_pair['Destination Worksheet ID']))
    rows = []
    for client in clients:
        rows.append(client['sheet_row'])
    gspread_function(wks.add_rows, len(rows), returns_none=True)
    first_empty_row = len(gspread_function(wks.col_values, 1)) + 1
    result = gspread_function(wks.update, (f'A{first_empty_row}', rows))

    try:
        up, down = result['updatedRange'].split('!')[1].split(':')
    except ValueError:
        return
    up = int(re.sub('[^0-9]', '', up))
    down = int(re.sub('[^0-9]', '', down))

    for client_index, row_index in enumerate(range(up, down+1)):
        if not 'info' in clients[client_index]:
            continue
        gspread_function(
            wks.insert_note,
            (f'{MANAGERS_NAME_AND_INFO_COL_LETTER}{row_index}', clients[client_index]['info']),
            returns_none=True
        )


def get_phone_info(clients):
    with open(dadata_tokens_file) as f:
        creds = json.loads(f.read())
    dadata = Dadata(creds['dadata_token'], creds['dadata_secret'])

    for client in clients:
        try:
            result = dadata.clean('phone', client['sheet_row'][PHONE_COL])
        except httpx.HTTPStatusError:
            continue
        info = f"{result['country']}, {result['region']}, {result['city']}, {result['timezone']}"
        info = info.replace(', None', '')
        if info == 'None':
            info = '–ù–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω'
        else:
            client['sheet_row'][PHONE_COL] = result['phone']
        client['sheet_row'][PHONE_INFO_COL] = info
    return clients


def main():
    try:
        while True:
            with open(sheet_pairs_file) as f:
                dictreader = csv.DictReader(f)
                for sheet_pair in dictreader:
                    clients = get_updates(sheet_pair)   # clients is Dict, 'sheet_row': [row], 'info': client_info
                    clients = remove_with_no_phones(clients)
                    if not clients:
                        continue
                    clients = get_client_info(clients)
                    clients = get_phone_info(clients)
                    google_write(clients, sheet_pair)
            time.sleep(pause_between_checks_secs)
    except Exception as e:
        send_stat(f'üî¥ –í—ã–∫–ª—é—á–∏–ª—Å—è –ø–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–æ–≤ ')
        send_personal('üî¥CRM main.py crash: ' + str(e))
        raise


if __name__ == '__main__':
    main()
